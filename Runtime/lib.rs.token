#![cfg_attr(not(feature = "std"), no_std)]

/// A FRAME pallet template with necessary imports

/// Feel free to remove or edit this file as needed.
/// If you change the name of this file, make sure to update its references in runtime/src/lib.rs
/// If you remove this file, you can remove those references

/// For more guidance on Substrate FRAME, see the example pallet
/// https://github.com/paritytech/substrate/blob/master/frame/example/src/lib.rs
use frame_support::{decl_error, decl_event, decl_module, decl_storage, ensure, StorageMap};
//use sp_std::vec::Vec;
use system::ensure_signed;

#[cfg(test)]
mod mock;

#[cfg(test)]
mod tests;

/// The pallet's configuration trait.
pub trait Trait: system::Trait {
    // Add other types and constants required to configure this pallet.

    /// The overarching event type.
    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;
}

// This pallet's storage items.
decl_storage! {
    // It is important to update your storage name so that your pallet's
     // storage items are isolated from other pallets.
    // ---------------------------------vvvvvvvvvvvvvv
    trait Store for Module<T: Trait> as TemplateModule {
        //TotalSupply get(fn total_supply):Vec<u64>;
        //NewValues get(fn new_values): Vec<u32>;
        //pub BalanceOf get(balance_of): map T::AccountId => u64;
        //Init get(is_init): bool;
        //Proofs: map hasher(blake2_128_concat) Vec<u8> => (T::AccountId, T::u64);
        BalanceOf get(balance_of): map hasher(blake2_128_concat) T::AccountId => u64;
        //IsInit get(fn isinit):Vec<bool>;
        //IsInit get(fn isinit):bool;
        TotalSupply get(total_supply): u64 = 21000000;
        Init get(is_init): bool;
    }
}

// The pallet's events
decl_event! {
    pub enum Event<T> where AccountId = <T as system::Trait>::AccountId {
        Transfer(AccountId, AccountId, u64),
    }
}

// The pallet's errors
decl_error! {
    pub enum Error for Module<T: Trait> {
        AlreadyInitialized,
        NoEnoughBalance,
        HappendOverFlow,
    }
}

// The pallet's dispatchable functions.
decl_module! {
    /// The module declaration.
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        // Initializing errors
        // this includes information about your errors in the node's metadata.
        // it is needed only if you are using errors in your pallet
        type Error = Error<T>;

        // Initializing events
        // this is needed only if you are using events in your pallet
        fn deposit_event() = default;

        fn init(origin) {
            //let sender = ensure_signed(origin)?;
            //let init_flg = IsInit::get();
            //ensure!(init_flg[0] == false, "Already initialized.");
            //<BalanceOf<T>>::insert(sender, 2100000000);
            //let mut v = Vec::new();
            //v.push(true);
            //IsInit::<>::put(v);

           let sender = ensure_signed(origin)?;
           //ensure!(Self::is_init() == false, "Already initialized.");
           ensure!(Self::is_init() == false, Error::<T>::AlreadyInitialized);
           <BalanceOf<T>>::insert(sender, Self::total_supply());
           <Init<>>::put(true);
        }

        // Transfer tokens from an account to another
        fn transfer(origin, to: T::AccountId, value: u64)  {
            let sender = ensure_signed(origin)?;
            let sender_balance = Self::balance_of(sender.clone());
            // This ensures that sender has more than sending units
            //ensure!(sender_balance >= value, "No enough balance.");
            ensure!(sender_balance >= value, Error::<T>::NoEnoughBalance);

            let updated_from_balance = sender_balance.checked_sub(value).ok_or("Overflow happened in balance")?;

            let recipient_balance = Self::balance_of(to.clone());
            let updated_to_balance = recipient_balance.checked_add(value).ok_or("overflow happened in balance")?;

            // Sub sender's balance
            <BalanceOf<T>>::insert(sender.clone(), updated_from_balance);

            // Add recipient's balance
            <BalanceOf<T>>::insert(to.clone(), updated_to_balance);

            Self::deposit_event(RawEvent::Transfer(sender, to, value));


        }
    }

}
